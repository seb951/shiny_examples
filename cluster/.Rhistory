?plotOutput
runApp('Desktop/toto')
runApp('Desktop/toto')
runApp('Desktop/toto')
runApp('Desktop/toto')
getwd()
runApp('Desktop/toto')
to = function(x = 1) {
print(x)
}
to(1)
to(2)
to(3)
to = function(x = 1) {
print(x+1)
}
to(3)
to(4)
to(-1324)
to("d")
runApp('Desktop/toto')
runApp('Desktop/toto')
runApp('Desktop/toto')
bird.orders
dist(bird.orders)
str(bird.orders)
datga(bird.orders)
data(bird.orders)
cars
head(cars)
head(mtcars)
prcomp(mtcars)
plot
mtcars.pca = prcomp(mtcars)
mtcars.pca = prcomp(mtcars)
plot(mtcars.pca)
biplot(mtcars.pca)
dev.new()
dev.new()
biplot(mtcars.pca)
summary(mtcars)
headers(mtcars)
mtcars
header(mtcars)
head(mtcars)
colnames(mtcars)
col=c("mpg","cyl")
col
mtcars[,col]
colnames(mtcars)
multifac_pca = function(col=c("mpg","cyl","disp","hp","drat","wt","qsec","vs","am","gear","carb")[c(1:7,10,11)]){
mtcars.pca <- prcomp(mtcars[,col], center = TRUE,scale. = TRUE)
}
mtcars.pca = multifac_pca()
biplot(mtcars.pca)
dev.new()
dev.new()
biplot(mtcars.pca)
?biplot
dim(mtcars.pca$x)
head(mtcars.pca$x)
pca_plot = function(pcX=1,pcY=2){
biplot(mtcars.pca[pcX],mtcars.pca$x[pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),)
}
pca_plot()
pca_plot = function(data =mtcars.pca ,pcX=1,pcY=2){
biplot(data[pcX],data$x[pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),)
}
pca_plot = function(data =mtcars.pca ,pcX=1,pcY=2){
biplot(data$x[pcX],data$x[pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),)
}
pca_plot
pca_plot()à
pca_plot()
1
pcX
pcX=1
mtcars.pca$x[pcX]
mtcars.pca$x
mtcars.pca$x
pca_plot = function(data = mtcars.pca,pcX=1,pcY=2){
biplot(data$x[,pcX],data$x[,pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),)
}
pca_plot = function(data = mtcars.pca,pcX=1,pcY=2){
biplot(data$x[,pcX],data$x[,pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),)
}
pca_plot()
data = mtcars.pca
data$x[,pcX]
data$x[,pcY]
pcY=2
data$x[,pcY]
biplot(data$x[,pcX],data$x[,pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY))
biplot(data$x[,pcX],data$x[,pcY])
biplot(data$x[,1],data$x[,2])
plot(data$x[,1],data$x[,2])
?biplot
plot(data,choices = 1:2)
biplot(data,choices = 1:2)
biplot(data,choices = 3:5)
biplot(data,choices = 3:4)
biplot(data,choices = 1:2)
biplot(data,choices = c(1,70)
)
biplot(data,choices = c(1,7))
pca_plot = function(data = mtcars.pca,pcX=1,pcY=2){
biplot(data,choices = c(pcX,pcY),xlab = paste0("PC",pcX),ylab = paste0("PC",pcY))
}
pca_plot
pca_plot()
install.packages("bios2mds")
?kmeans
kmeans
k_start = 1
k_end = 4
c(k_start:k_end)
silhouette_scores <- function(k_start=1,k_end=4){
multi_k = data.frame(k=k_start:k_end,mean_sil=0)
for(k in k_start:k_end){
km <- kmeans(df, centers = k, nstart=25)
ss <- silhouette(km$cluster, dist(df))
multi_k[k,2] = mean(ss[, 3])
}
}
silhouette_scores <- function(df =  mtcars.pca$x[,c(1:2)], k_start=1,k_end=4){
multi_k = data.frame(k=k_start:k_end,mean_sil=0)
for(k in k_start:k_end){
km <- kmeans(df, centers = k, nstart=25)
ss <- silhouette(km$cluster, dist(df))
multi_k[k,2] = mean(ss[, 3])
}
}
silhouette_scores()
library(cluster)
silhouette_scores()
silhouette_scores <- function(df =  mtcars.pca$x[,c(1:2)], k_start=2,k_end=5){
multi_k = data.frame(k=k_start:k_end,mean_sil=0)
for(k in k_start:k_end){
km <- kmeans(df, centers = k, nstart=25)
ss <- silhouette(km$cluster, dist(df))
multi_k[k-1,2] = mean(ss[, 3])
}
}
silhouette_scores()
silhouette_scores <- function(df =  mtcars.pca$x[,c(1:2)], k_start=2,k_end=5){
multi_k = data.frame(k=k_start:k_end,mean_sil=0)
for(k in k_start:k_end){
km <- kmeans(df, centers = k, nstart=25)
ss <- silhouette(km$cluster, dist(df))
multi_k[k-1,2] = mean(ss[, 3])
}
multi_k
}
silhouette_scores()
plot(multi_k[,1], type='b', multi_k[,2], xlab='Number of clusters', ylab='Average Silhouette Scores', frame=FALSE)
multi_k = silhouette_scores()
plot(multi_k[,1], type='b', multi_k[,2], xlab='Number of clusters', ylab='Average Silhouette Scores', frame=FALSE)
biplot(data,choices = c(pcX,pcY),xlab = paste0("PC",pcX),ylab = paste0("PC",pcY))
?biplot
biplot(data,choices = c(pcX,pcY),xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),xlabs = NULL)
biplot(data,choices = c(pcX,pcY),xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),xlabs = "r")
biplot(data,choices = c(pcX,pcY),xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),xlabs = "r",ylabs="r")
dim(data$x)
biplot(data,choices = c(pcX,pcY),xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),xlabs = c("r",32),ylabs=rep("r",32))
biplot(data,choices = c(pcX,pcY),xlab = paste0("PC",pcX),ylab = paste0("PC",xlabs=rep("·", nrow(data)), ylabs = rep("·", ncol(data)))
)
biplot(data,choices = c(pcX,pcY),xlab = paste0("PC",pcX),ylab = paste0("PC",xlabs=rep("·", nrow(data$x)), ylabs = rep("·", ncol(data$x)))
)
biplot(data,choices = c(pcX,pcY),xlab = paste0("PC",pcX),ylab = paste0("PC",xlabs=rep("·", nrow=32, ylabs = rep("·",32))
)
)
biplot(data,choices = c(pcX,pcY),xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),xlabs=rep("·", nrow=32), ylabs = rep("·",32))
biplot(data,choices = c(pcX,pcY),xlab = paste0("PC",pcX),ylab = paste0("PC",2),xlabs=rep("·", nrow(data$x)), ylabs = rep("·", ncol(data$x)))
biplot(data,choices = c(pcX,pcY),xlab = paste0("PC",pcX),ylab = paste0("PC",2),xlabs=rep("·", nrow(data$x)))
biplot(data,choices = c(pcX,pcY),xlab = paste0("PC",pcX),ylab = paste0("PC",2),ylabs=rep("·", nrow(data$x)))
install.packages(PCAtools)
pca_plot = function(data = mtcars.pca,pcX=1,pcY=2){
plot(data$x[pcX],data$x[,pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY))
}
pca_plot = function(data = mtcars.pca,pcX=1,pcY=2){
plot(data$x[pcX],data$x[,pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY))
}
pca_plot()
pca_plot = function(data = mtcars.pca,pcX=1,pcY=2){
plot(data$x[,pcX],data$x[,pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY))
}
pca_plot()
multi_k
data = mtcars.pca
km <- kmeans(data$x[,1:2], centers = k, nstart=25)
k = 2
km <- kmeans(data$x[,1:2], centers = k, nstart=25)
k
km
str(km)
str(km$cluster)
head(data$x)
unique(km$cluster)
unique(km
pca_plot = function(data = mtcars.pca,pcX=1,pcY=2,k = 2){
pca_plot = function(data = mtcars.pca,pcX=1,pcY=2,k = 2){
km <- kmeans(data$x[,1:2], centers = k, nstart=25)
colors = rainbow(length(unique$km$cluster))
plot(data$x[,pcX],data$x[,pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),col=colors)
}
pca_plot()
pca_plot = function(data = mtcars.pca,pcX=1,pcY=2,k = 2){
km <- kmeans(data$x[,1:2], centers = k, nstart=25)
colors = rainbow(length(unique(km$cluster)))
plot(data$x[,pcX],data$x[,pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),col=colors)
}
pca_plot()
pca_plot()
pca_plot(k = 3)
pca_plot(k = 4)
pca_plot(k = 1)
pca_plot(k = 2)
pca_plot(k = 3)
dev.new()
biplot(data)
biplot(data)
dev.new()
biplot(data)
biplot(data,col = colors)
colors
km
km$cluster
colors = rainbow(length(unique(km$cluster)))
colors
df[] <- lapply(df, function(x) as.character(factor(x, labels=lvls)))
lapply(km$cluster, function(x) as.character(factor(km$cluster, labels=colors)))
dim(km$cluster)
str(km$cluster)
lapply(1:2, function(x) as.character(factor(1:2, labels=colors)))
lapply(dataframe(1:2), function(x) as.character(factor(1:2, labels=colors)))
lapply(data.frame(1:2), function(x) as.character(factor(1:2, labels=colors)))
lapply(data.frame(km$cluster), function(x) as.character(factor(km$cluster, labels=colors)))
head(km$cluster)
pca_plot = function(data = mtcars.pca,pcX=1,pcY=2,k = 2){
km <- kmeans(data$x[,1:2], centers = k, nstart=25)
colors = rainbow(length(unique(km$cluster)))
colors_val <- lapply(data.frame(km$cluster), function(x) as.character(factor(km$cluster, labels=colors)))
plot(data$x[,pcX],data$x[,pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),col=colors_val)
}
pca_plot
pca_plot()
colors = rainbow(length(unique(km$cluster)))
colors_val <- lapply(data.frame(km$cluster), function(x) as.character(factor(km$cluster, labels=colors)))
colors
km$cluster
colors = rainbow(length(unique(km$cluster)))
colors
colors_val <- lapply(data.frame(km$cluster), function(x) as.character(factor(km$cluster, labels=colors)))
colors_val
plot(data$x[,pcX],data$x[,pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),col=colors_val)
plot(data$x[,pcX],data$x[,pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),col=colors_val$km.cluster)
colors_val$colors_val
colors_val$km.cluster
str(colors_val$km.cluster)
type(colors_val$km.cluster)
(colors_val$km.cluster)
as.character(colors_val$km.cluster)
as.character(colors_val$km.cluster)
pca_plot = function(data = mtcars.pca,pcX=1,pcY=2,k = 2){
km <- kmeans(data$x[,1:2], centers = k, nstart=25)
colors = rainbow(length(unique(km$cluster)))
colors_val <- lapply(data.frame(km$cluster), function(x) as.character(factor(km$cluster, labels=colors)))
colors_val = as.character(colors_val$colors_val)
plot(data$x[,pcX],data$x[,pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),col=colors_val)
}
pca_plot()
pca_plot()
colors = rainbow(length(unique(km$cluster)))
colors_val <- lapply(data.frame(km$cluster), function(x) as.character(factor(km$cluster, labels=colors)))
colors_val = as.character(colors_val$colors_val)
colors_val
colors = rainbow(length(unique(km$cluster)))
colors_val <- lapply(data.frame(km$cluster), function(x) as.character(factor(km$cluster, labels=colors)))
pca_plot = function(data = mtcars.pca,pcX=1,pcY=2,k = 2){
km <- kmeans(data$x[,1:2], centers = k, nstart=25)
colors = rainbow(length(unique(km$cluster)))
colors_val <- lapply(data.frame(km$cluster), function(x) as.character(factor(km$cluster, labels=colors)))
colors_val = as.character(colors_val$km.cluster)
plot(data$x[,pcX],data$x[,pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),col=colors_val)
}
pca_plot()
pca_plot(k = 3)
pca_plot(k = 5)
pca_plot(k = 1)
pca_plot(k = 2)
biplot(data,choices=c(pcX,pcY))
biplot(data,choices=c(pcX,pcY),col=colors_val)
colors_val
colors_val <- lapply(data.frame(km$cluster), function(x) as.character(factor(km$cluster, labels=colors)))
colors_val = as.character(colors_val$km.cluster)
colors_val
biplot(data,choices=c(pcX,pcY),col=colors_val)
colors_val?biplot
?biplot
plot_silhouette_scores <- function(data =  mtcars, k_start=2,k_end=5,
pca_factors=c("mpg","cyl","disp","hp","drat","wt","qsec","vs","am","gear","carb")[c(1:7,10,11)])
{
#pca on what variables
data.pca <- prcomp(data[,col], center = TRUE,scale. = TRUE)
multi_k = data.frame(k=k_start:k_end,mean_sil=0)
for(k in k_start:k_end){
km <- kmeans(data.pca$x, centers = k, nstart=25)
ss <- silhouette(km$cluster, dist(data.pca$x))
multi_k[k-1,2] = mean(ss[, 3])
}
plot(multi_k[,1], type='b', multi_k[,2], xlab='Number of clusters', ylab='Average Silhouette Scores', frame=FALSE)
}
plot_silhouette_scores()
pca_plot = function(data = mtcars,pcX=1,pcY=2,k = 2,
pca_factors=c("mpg","cyl","disp","hp","drat","wt","qsec","vs","am","gear","carb")[c(1:7,10,11)])
{
#pca on what variables
data <- prcomp(data[,col], center = TRUE,scale. = TRUE)
km <- kmeans(data.pca$x[,1:2], centers = k, nstart=25)
colors = rainbow(length(unique(km$cluster)))
colors_val <- lapply(data.frame(km$cluster), function(x) as.character(factor(km$cluster, labels=colors)))
colors_val = as.character(colors_val$km.cluster)
plot(data$x[,pcX],data$x[,pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),col=colors_val)
#biplot(data,choices=c(pcX,pcY))
}
pca_plot()
pca_plot = function(data = mtcars,pcX=1,pcY=2,k = 2,
pca_factors=c("mpg","cyl","disp","hp","drat","wt","qsec","vs","am","gear","carb")[c(1:7,10,11)])
{
#pca on what variables
data.pca <- prcomp(data[,col], center = TRUE,scale. = TRUE)
km <- kmeans(data.pca$x[,1:2], centers = k, nstart=25)
colors = rainbow(length(unique(km$cluster)))
colors_val <- lapply(data.frame(km$cluster), function(x) as.character(factor(km$cluster, labels=colors)))
colors_val = as.character(colors_val$km.cluster)
plot(data$x[,pcX],data$x[,pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),col=colors_val)
#biplot(data,choices=c(pcX,pcY))
}
pca_plot()
col
data = mtcars;pcX=1;pcY=2;k = 2;
pca_factors=c("mpg","cyl","disp","hp","drat","wt","qsec","vs","am","gear","carb")[c(1:7,10,11)])
data = mtcars;pcX=1;pcY=2;k = 2;
pca_factors=c("mpg","cyl","disp","hp","drat","wt","qsec","vs","am","gear","carb")[c(1:7,10,11)]
data.pca <- prcomp(data[,pca_factors], center = TRUE,scale. = TRUE)
km <- kmeans(data.pca$x[,1:2], centers = k, nstart=25)
colors = rainbow(length(unique(km$cluster)))
colors
colors_val <- lapply(data.frame(km$cluster), function(x) as.character(factor(km$cluster, labels=colors)))
colors_val = as.character(colors_val$km.cluster)
colors_val
plot(data$x[,pcX],data$x[,pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),col=colors_val)
plot(data.pca$x[,pcX],data.pca$x[,pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),col=colors_val)
plot(data.pca$x[,pcX],data.pca$x[,pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),col=colors_val,pch= 4)
plot(data.pca$x[,pcX],data.pca$x[,pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),col=colors_val,pch= 5)
plot(data.pca$x[,pcX],data.pca$x[,pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),col=colors_val,pch= 7)
plot(data.pca$x[,pcX],data.pca$x[,pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),col=colors_val,pch= 8)
plot(data.pca$x[,pcX],data.pca$x[,pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),col=colors_val,pch= 8)
runApp('Desktop/toto')
runApp('Desktop/toto')
runApp('Desktop/toto')
library(shiny)
source("fun.R")
getwd()
install.packages("here")
library(here)
here()
there()
runApp('Documents/git_repos/phylogenetic_trees')
#fun1
renderphylo = function(drop="",type = "phylogram"){
#Slightly better than default plot
if(drop!="DON'T DROP") bird.orders_dropped= drop.tip(bird.orders,drop)
if(drop=="DON'T DROP") bird.orders_dropped= bird.orders
if(drop=="DROP RANDOMLY 10 TIPS") bird.orders_dropped= drop.tip(bird.orders,bird.orders$tip.label[sample(1:23,10)])
phylo2 = plot.phylo(bird.orders_dropped,type=type, edge.width = 1, label.offset = 1,cex = 0.4, main = "Figure 1 (dropping tips/type)")
}
#fun2
rendercoloured = function(color1="blue", color2="red",pies = "YES",tips_colors= "YES") {
trait1 = c(sample(c(0:25),6),c(sample(25:75,6)),sample(c(75:100),11))
names(trait1) = bird.orders$tip.label
#Use contMap from phytools
tree.trait <- contMap(bird.orders, trait1, plot = F)
tree.trait<-setMap(tree.trait, colors=c(color1,color2))
#Carefull, we now plot using the plotting tool from phytools
plot.contMap(tree.trait, type = "phylogram", legend = 0.4*max(nodeHeights(bird.orders)), fsize = c(0.9, 0.7), lwd=3, edge.width = 2, offset = 1,mar = c(2,4,3,2))
#add pies
if(pies=="YES"){
pies = matrix(0,nrow =bird.orders$Nnode,ncol=2)
for(i in 1:bird.orders$Nnode) {x = sample(seq(0,1,by = 0.001),1); pies[i,] = c(x,1-x)}
nodelabels(pie = pies, piecol = c(color1,color2), cex = 0.6)
}
if(tips_colors=="YES"){
tip.labels.col = c(rep(color1,11),rep(color2,12))
tiplabels(pch=15, cex=1.2, col= tip.labels.col,offset = 0.7)
}
#Add a title manually to plot.contMap
title("Figure 2 (adding branch colors according to a trait)",xpd = T)
}
#fun3
rendermap = function() {
renderPlot({
#Matrix of random USA GPS coordinates
mat = matrix(c(sample(seq(from = 32, to = 45, by = 0.001),23),sample(seq(from = -120, to = -84, by = 0.001),23)),nrow = 23,ncol =2)
rownames(mat) = bird.orders$tip.label
###World mapping function (Here we are using a USA map, but this can be changes with the database option)
phylo.to.map(bird.orders,coords = mat, database = "usa")
#Add a title manually to plot.contMap
title("Figure 4 (geolocalised samples map)",line = -3)
},width=1400, height = 1200)
}
#data
summary(mtcars)
###
rendersilhouette <- function(data =  mtcars, k_start=2,k_end=5,
pca_factors=1:ncol(data))
{
#pca on what variables
data.pca <- prcomp(data[,pca_factors], center = TRUE,scale. = TRUE)
multi_k = data.frame(k=k_start:k_end,mean_sil=0)
for(k in k_start:k_end){
km <- kmeans(data.pca$x[,1:10], centers = k, nstart=25)
ss <- silhouette(km$cluster, dist(data.pca$x))
multi_k[k-1,2] = mean(ss[, 3])
}
plot(multi_k[,1], type='b', multi_k[,2],main="Figure 3: clustering (silhouette score) \n Mesotheliama gene expression dataset", xlab='Number of clusters', ylab='Average Silhouette Scores', frame=FALSE)
}
###
renderpca = function(data = meso[2],pcX=1,pcY=2,k = 2,
pca_factors=1:ncol(data))
{
#pca on what variables
data.pca <- prcomp(data[,pca_factors], center = TRUE,scale. = TRUE)
km <- kmeans(data.pca$x[,1:10], centers = k, nstart=25)
colors = rainbow(length(unique(km$cluster)))
colors_val <- lapply(data.frame(km$cluster), function(x) as.character(factor(km$cluster, labels=colors)))
colors_val = as.character(colors_val$km.cluster)
plot(data.pca$x[,pcX],data.pca$x[,pcY],xlab = paste0("PC",pcX),ylab = paste0("PC",pcY),col=colors_val,pch=8,main = "PCA & k grouping \n mesotheliama gene expression dataset")
#biplot(data,choices=c(pcX,pcY))
}
read_mesothelioma = function(){
###meso data:https://cran.r-project.org/web/packages/dnapath/vignettes/package_data.html#meso-data
#file_clinical <- paste0("http://linkedomics.org/data_download/TCGA-MESO/Human__",
#                      "TCGA_MESO__MS__Clinical__Clinical__01_28_2016__BI__",
#                     "Clinical__Firehose.tsi")
#file_rnaseq <- paste0("http://linkedomics.org/data_download/TCGA-MESO/Human__",
#                  "TCGA_MESO__UNC__RNAseq__HiSeq_RNA__01_28_2016__BI__Gene",
#                 "__Firehose_RSEM_log2.cct.gz")
#clinical <- readr::read_tsv(file_clinical)
#rnaseq <- readr::read_tsv(file_rnaseq)
#write.csv(clinical,"data/clinical_meso.csv",row.names=F)
rnaseq_most_expressed = as.data.frame(rnaseq)
rnaseq_most_expressed = rnaseq_most_expressed[rowMeans(rnaseq_most_expressed[,-1])>5.2,]
write.csv(rnaseq_most_expressed,"data/rnaseq_most_expr_meso.csv",row.names=F)
rnaseq_most_expressed = read.csv("data/rnaseq_most_expr_meso.csv",row.names = 1)
clinical = read.csv("data/clinical_meso.csv",row.names = 1)
list(clinical,t(rnaseq_most_expressed))
}
runApp('Documents/git_repos/phylogenetic_trees')
source("~/Documents/git_repos/phylogenetic_trees/fun.R")
read_mesothelioma = function(path = "~/Documents/git_repos/shiny_examples/data/"){
###meso data:https://cran.r-project.org/web/packages/dnapath/vignettes/package_data.html#meso-data
if(file.exists(paste0(path,"rnaseq_most_expr_meso.csv")) == F){
library(readr)
#  file_clinical <- paste0("http://linkedomics.org/data_download/TCGA-MESO/Human__",
#                    "TCGA_MESO__MS__Clinical__Clinical__01_28_2016__BI__",
#                   "Clinical__Firehose.tsi")
# file_rnaseq <- paste0("http://linkedomics.org/data_download/TCGA-MESO/Human__",
#                "TCGA_MESO__UNC__RNAseq__HiSeq_RNA__01_28_2016__BI__Gene",
#               "__Firehose_RSEM_log2.cct.gz")
clinical <- readr::read_tsv(file_clinical)
rnaseq <- readr::read_tsv(file_rnaseq)
write.csv(clinical,paste0(path,"clinical_meso.csv"),row.names=F)
###most expressed, 10% most variables genes (smaller dataset, keeping a lot of the signal)
rnaseq_most_expressed = as.data.frame(rnaseq)
rnaseq_most_expressed = rnaseq_most_expressed[rowMeans(rnaseq_most_expressed[,-1])>5.2,]
sd = rep(0,nrow(rnaseq_most_expressed))
for(i in 1:nrow(rnaseq_most_expressed))
{
sd[i] = sd(rnaseq_most_expressed[i,-1])
}
rnaseq_most_expressed_var = rnaseq_most_expressed[sd>quantile(sd,seq(0,1,by=0.1))[10],]
write.csv(rnaseq_most_expressed_var,paste0(path,"rnaseq_most_expr_meso.csv"),row.names=F)
}
if(file.exists(paste0(path,"rnaseq_most_expr_meso.csv")) == T)
rnaseq_most_expressed = read.csv(paste0(path,"rnaseq_most_expr_meso.csv"),row.names = 1)
clinical = read.csv(paste0(path,"clinical_meso.csv"),row.names = 1)
list(clinical,t(rnaseq_most_expressed))
}
read_mesothelioma()
x = read_mesothelioma()
x[[1]]
head(x[[1]])
print(getwd())
shiny::runApp('Documents/git_repos/shiny_examples/cluster')
clinical
runApp('Documents/git_repos/shiny_examples/cluster')
shiny::runApp('Documents/git_repos/shiny_examples/cluster')
library(here)
getwd()
shiny::runApp()
file.exists("/Users/jerry/Documents/git_repos/shiny_examples/cluster/R/clustering.R")
getwd()
system("lst")
system("ls")
file.exists(paste0(path,"rnaseq_most_expr_meso.csv")
)
path = "/data/"
file.exists(paste0(path,"rnaseq_most_expr_meso.csv")
)
runApp()
runApp()
